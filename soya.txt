import warnings
import itertools
import pandas as pd
import numpy as np
import statsmodels.api as sm
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
fields = ['Modal_Price', 'Price_Date']
df= pd.read_csv(r"C:\Users\rishi\Desktop\SIH final\soya_20240908_144445.csv",skipinitialspace=True, usecols=fields)
df.Price_Date = pd.to_datetime(df.Price_Date, errors='coerce')
df=df.set_index('Price_Date')
df.head(2)
data = df.copy()
y = data
y
# The 'MS' string groups the data in buckets by start of the month
y = y['Modal_Price'].resample('MS').mean()

# The term bfill means that we use the value before filling in missing values
y = y.fillna(y.bfill())

print(y)
y.plot(figsize=(15, 6))
plt.show()
# Define the p, d and q parameters to take any value between 0 and 2
p = d = q = range(0, 2)

# Generate all different combinations of p, q and q triplets
pdq = list(itertools.product(p, d, q))

# Generate all different combinations of seasonal p, q and q triplets
seasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]

print('Examples of parameter combinations for Seasonal ARIMA...')
print('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))
print('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))
print('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))
print('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))
warnings.filterwarnings("ignore") # specify to ignore warning messages

for param in pdq:
    for param_seasonal in seasonal_pdq:
        try:
            mod = sm.tsa.statespace.SARIMAX(y,
                                            order=param,
                                            seasonal_order=param_seasonal,
                                            enforce_stationarity=False,
                                            enforce_invertibility=False)

            results = mod.fit()

            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))
        except:
            continue
            results.plot_diagnostics(figsize=(15, 12))
plt.show()
date_to_predict = input("enter date from which you want to  predict:")
ax = y['1990':].plot(label='observed')
pred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7)

ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.2)

ax.set_xlabel('Date')
ax.set_ylabel('Crop Price')
plt.legend()

plt.show()
y_forecasted = pred.predicted_mean
y_truth = y[date_to_predict:]

# Compute the mean square error
mse = ((y_forecasted - y_truth) ** 2).mean()
print('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))
ax = y['1990':].plot(label='observed')
pred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7)

ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.2)

ax.set_xlabel('Date')
ax.set_ylabel('crop_price')
plt.legend()

plt.show()
y_forecasted = pred.predicted_mean
y_truth = y[date_to_predict:]

# Compute the mean square error
mse = ((y_forecasted - y_truth) ** 2).mean()
print('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))
pred_dynamic = results.get_prediction(start=pd.to_datetime(date_to_predict), dynamic=True, full_results=True)
pred_dynamic_ci = pred_dynamic.conf_int()
ax = y['1990':].plot(label='observed', figsize=(20, 15))
pred_dynamic.predicted_mean.plot(label='Dynamic Forecast', ax=ax)

ax.fill_between(pred_dynamic_ci.index,
                pred_dynamic_ci.iloc[:, 0],
                pred_dynamic_ci.iloc[:, 1], color='k', alpha=.25)

ax.fill_betweenx(ax.get_ylim(), pd.to_datetime(date_to_predict), y.index[-1],
                 alpha=.1, zorder=-1)

ax.hlines(y=5000, xmin=ax.get_xlim()[0], xmax=ax.get_xlim()[1], colors='green', linewidth=3, linestyles='--', label='max')
ax.hlines(y=-1000, xmin=ax.get_xlim()[0], xmax=ax.get_xlim()[1], colors='red', linewidth=3, linestyles='--', label='min')

plt.legend()
plt.show()
# Extract the predicted and true values of our time series
y_forecasted = pred_dynamic.predicted_mean
y_truth = y[date_to_predict:]

# Compute the mean square error
mse = ((y_forecasted - y_truth) ** 2).mean()
print('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))
# Get forecast 20 steps ahead in future
pred_uc = results.get_forecast(steps=20)

# Get confidence intervals of forecasts
pred_ci = pred_uc.conf_int()
pred_ci
# Get the lowest modal price from the lower Modal_Price column
lowest_modal_price = pred_ci['lower Modal_Price'].min()

# Get the highest modal price from the upper Modal_Price column
highest_modal_price = pred_ci['upper Modal_Price'].max()

# Print the results
print(f"Lowest Modal Price: {lowest_modal_price:.2f}")
print(f"Highest Modal Price: {highest_modal_price:.2f}")
import matplotlib.pyplot as plt

# Your existing plot code
ax = y.plot(label='observed', figsize=(20, 15), color='lightblue')
pred_uc.predicted_mean.plot(ax=ax, label='Forecast', color='darkblue')

ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.25)

ax.set_xlabel('Date')
ax.set_ylabel('CROP PRICE')

# Add bold horizontal lines with labels
ax.hlines(y=5000, xmin=ax.get_xlim()[0], xmax=ax.get_xlim()[1], colors='green', linewidth=3, linestyles='--', label='max')
ax.hlines(y=-1000, xmin=ax.get_xlim()[0], xmax=ax.get_xlim()[1], colors='red', linewidth=3, linestyles='--', label='min')

plt.legend()
plt.show()